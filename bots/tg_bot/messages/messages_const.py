from typing import Any, Literal, Optional

from tinkoff.invest import PortfolioResponse

from database.pgsql.models import Instrument

START_TEXT = (
    "<b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø <b>TradingTMasterBot</b> üêçüìà\n\n"
    "–ü–æ–º–æ–≥–∞—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏: –¥–æ–±–∞–≤–ª—è—é –∞–∫–∫–∞—É–Ω—Ç, "
    "–ø–æ–ª—É—á–∞—é –ø–æ—Ä—Ç—Ñ–µ–ª—å, —Å—á–∏—Ç–∞—é –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (Donchian, ATR) –∏ –ø—Ä–∏—Å—ã–ª–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω.\n\n"
    "–û—Ç–∫—Ä–æ–π –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ <code>/help</code>, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏."
)

HELP_TEXT = (
    "<b>–°–ø—Ä–∞–≤–∫–∞</b>\n\n"
    "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
    "‚Ä¢ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ.\n"
    "‚Ä¢ /help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞.\n\n"
    "<b>–ê–∫–∫–∞—É–Ω—Ç—ã:</b>\n"
    "‚Ä¢ /add_account_check ‚Äî –≤—ã–±—Ä–∞—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n"
    "‚Ä¢ /remove_account_check ‚Äî —É–¥–∞–ª–∏—Ç—å —Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç.\n\n"
    "<b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</b>\n"
    "‚Ä¢ /add_instruments_for_check ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n"
    "‚Ä¢ /uncheck_instruments ‚Äî –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.\n\n"
    "<b>–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞</b>:\n"
    "1) –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ –±–∞–∑—É.\n"
    "2) –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: Donchian 55/20 –∏ ATR(14).\n"
    "3) –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –ª–µ–Ω—Ç—É —Ü–µ–Ω (last_price) –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è.\n\n"
    "<b>–ü–æ–¥—Å–∫–∞–∑–∫–∏:</b>\n"
    "‚Ä¢ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∏—Ç—å –∏–ª–∏ –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.\n"
    "‚Ä¢ –ö–Ω–æ–ø–∫–∏ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ —Ö–æ–¥—É —Å—Ü–µ–Ω–∞—Ä–∏—è ‚Äî —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞.\n\n"
    "<b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏</b>:\n"
    "‚Äî –ë—ç–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç aiogram v3 –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ.\n"
    "‚Äî –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ë–î; –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–µ–ª–∞—é—Ç—Å—è –ø–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º —Å–≤–µ—á–∞–º.\n"
)


def text_add_account_message(indicators: list[dict[str, Any]]) -> str:
    return (f"–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:\n"
            f"{'\n'.join(f"{i['ticker']} - {i['direction']}" for i in indicators)}")


def text_delete_account_message(portfolio: PortfolioResponse) -> str:
    return (f"–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω. –£–¥–∞–ª–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã:\n"
            f"{'\n'.join(f"<b>{p.ticker}</b>" for p in portfolio.positions)}")


def text_add_favorites_instruments(instruments: list[Instrument]) -> str:
    return (f"–ù–∞—á–∏–Ω–∞–µ–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:\n"
            f"{'\n'.join(f"‚úÖ <b>{i.ticker}</b>" for i in instruments)}")


def text_uncheck_favorites_instruments(instruments: list[Instrument]) -> str:
    return (f"–ü–µ—Ä–µ—Å—Ç–∞–µ–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:\n"
            f"{'\n'.join(f"‚úÖ <b>{i.ticker}</b>" for i in instruments)}")


def _fmt(x: Optional[float], nd: int = 2) -> str:
    return ("{0:,.%df}" % nd).format(x).replace(",", " ") if x is not None else "‚Äî"


def text_favorites_breakout(
        ind: Instrument,
        side: Literal["long", "short"],
        *,
        last_price: Optional[float] = None,
        price_point_value: Optional[float] = None,  # ¬´—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—É–Ω–∫—Ç–∞ —Ü–µ–Ω—ã¬ª, –µ—Å–ª–∏ –µ—Å—Ç—å
) -> str:
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏ –ø—Ä–æ–±–æ–µ 55-–¥–Ω–µ–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
    side='long'  ‚Üí –ø—Ä–æ–±–æ–π –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã (donchian_long_55)
    side='short' ‚Üí –ø—Ä–æ–±–æ–π –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã (donchian_short_55)
    """
    boundary = ind.donchian_long_55 if side == "long" else ind.donchian_short_55
    atr = ind.atr14 or 0.0

    # —É—Ä–æ–≤–Ω–∏: –≥—Ä–∞–Ω–∏—Ü–∞ - atr/2, –≥—Ä–∞–Ω–∏—Ü–∞ + atr/2, –≥—Ä–∞–Ω–∏—Ü–∞ + atr, –≥—Ä–∞–Ω–∏—Ü–∞ + 1.5*atr
    lvl_m_half = boundary - atr / 2 if 'long' else boundary + atr / 2
    lvl_p_half = boundary + atr / 2 if 'long' else boundary - atr / 2
    lvl_p_1x = boundary + atr if 'long' else boundary - atr / 2
    lvl_p_1_5x = boundary + 1.5 * atr if 'long' else boundary - atr / 2

    side_txt = "–ü—Ä–æ–±–æ–π ‚Üë –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã (55)" if side == "long" else "–ü—Ä–æ–±–æ–π ‚Üì –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã (55)"

    lines = [
        f"<b>{side_txt}</b>",
        f"{ind.ticker} ‚Ä¢ {ind.instrument_id}",
    ]
    if last_price is not None:
        lines.append(f"–¶–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏: <b>{_fmt(last_price, 4)}</b>")
    lines += [
        f"–ì—Ä–∞–Ω–∏—Ü–∞: <b>{_fmt(boundary, 4)}</b>",
        f"ATR(14): <b>{_fmt(ind.atr14, 4)}</b>",
    ]
    if price_point_value is not None:
        lines.append(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—É–Ω–∫—Ç–∞: <b>{_fmt(price_point_value, 4)}</b>")

    if side == "long":
        lines += [
            "–£—Ä–æ–≤–Ω–∏:",
            f"‚Ä¢ –ì—Ä–∞–Ω–∏—Ü–∞ ‚àí ATR/2: <b>{_fmt(lvl_m_half, 4)}</b>",
            f"‚Ä¢ –ì—Ä–∞–Ω–∏—Ü–∞ + ATR/2: <b>{_fmt(lvl_p_half, 4)}</b>",
            f"‚Ä¢ –ì—Ä–∞–Ω–∏—Ü–∞ + ATR:   <b>{_fmt(lvl_p_1x, 4)}</b>",
            f"‚Ä¢ –ì—Ä–∞–Ω–∏—Ü–∞ + 1.5 ATR: <b>{_fmt(lvl_p_1_5x, 4)}</b>",
        ]
    elif side == "short":
        lines += [
            "–£—Ä–æ–≤–Ω–∏:",
            f"‚Ä¢ –ì—Ä–∞–Ω–∏—Ü–∞ + ATR/2: <b>{_fmt(lvl_m_half, 4)}</b>",
            f"‚Ä¢ –ì—Ä–∞–Ω–∏—Ü–∞ - ATR/2: <b>{_fmt(lvl_p_half, 4)}</b>",
            f"‚Ä¢ –ì—Ä–∞–Ω–∏—Ü–∞ - ATR:   <b>{_fmt(lvl_p_1x, 4)}</b>",
            f"‚Ä¢ –ì—Ä–∞–Ω–∏—Ü–∞ - 1.5 ATR: <b>{_fmt(lvl_p_1_5x, 4)}</b>",
        ]
    return "\n".join(lines)


# ========== –°–ß–ï–¢–ê: –ø—Ä–æ–±–æ–π 20-–¥–Ω–µ–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (—Å—Ç–æ–ø –ø–æ –ø–æ–∑–∏—Ü–∏–∏) ==========

def text_stop_long_position(ind: Instrument, *, last_price: Optional[float] = None) -> str:
    """
    –î–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –õ–û–ù–ì–ê: –ø—Ä–æ–±–æ–π –≤–Ω–∏–∑ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã Donchian(20).
    """
    lines = [
        "<b>–°—Ç–æ–ø –ø–æ –ª–æ–Ω–≥—É (–ø—Ä–æ–±–æ–π –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã 20)</b>",
        f"{ind.ticker} ‚Ä¢ {ind.instrument_id}",
    ]
    if last_price is not None:
        lines.append(f"–¶–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏: <b>{_fmt(last_price, 4)}</b>")
    lines.append(f"–ì—Ä–∞–Ω–∏—Ü–∞ (SHORT_20): <b>{_fmt(ind.donchian_short_20, 4)}</b>")
    return "\n".join(lines)


def text_stop_short_position(ind: Instrument, *, last_price: Optional[float] = None) -> str:
    """
    –î–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –®–û–†–¢–ê: –ø—Ä–æ–±–æ–π –≤–≤–µ—Ä—Ö –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã Donchian(20).
    """
    lines = [
        "<b>–°—Ç–æ–ø –ø–æ —à–æ—Ä—Ç—É (–ø—Ä–æ–±–æ–π –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã 20)</b>",
        f"{ind.ticker} ‚Ä¢ {ind.instrument_id}",
    ]
    if last_price is not None:
        lines.append(f"–¶–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏: <b>{_fmt(last_price, 4)}</b>")
    lines.append(f"–ì—Ä–∞–Ω–∏—Ü–∞ (LONG_20): <b>{_fmt(ind.donchian_long_20, 4)}</b>")
    return "\n".join(lines)
